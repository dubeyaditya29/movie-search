{"version":3,"sources":["components/MovieCard/MovieCard.js","components/Loader/Loader.js","components/SearchMovie/SearchMovie.js","App.js","serviceWorker.js","index.js"],"names":["Moviecard","props","movie","className","key","id","src","poster_path","alt","title","release_date","vote_average","overview","Loader","style","display","justifyContent","alignItems","width","height","marginTop","color","SearchMovie","useState","query","setQuery","movies","setMovies","loading","setLodaing","message","setMessage","filter","setFilter","moviesForUI","setMoviesForUI","sort","setSort","sleep","milliseconds","Promise","resolve","setTimeout","useEffect","filteredMovies","toLowerCase","includes","toggleSort","direction","sortedMovies","moviesToSort","length","a","b","localeCompare","reverse","searchMovies","e","preventDefault","API_KEY","process","REACT_APP_API_KEY","url","fetch","res","json","data","results","document","getElementById","reset","console","log","onSubmit","htmlFor","type","name","placeholder","onChange","target","value","onClick","map","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.a4fdff8e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./MovieCard.css\";\nexport default function Moviecard(props) {\n  const { movie } = props;\n\n  return (\n    <div className=\"card\" key={movie.id}>\n      <img\n        className=\"card--image\"\n        src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${movie.poster_path}`}\n        alt={movie.title + \"poster\"}\n      ></img>\n      <div className=\"card--content\">\n        <h3 className=\"card--title\">{movie.title}</h3>\n        <p>\n          <small>RELEASE DATE: {movie.release_date}</small>\n        </p>\n        <p>\n          <small>RATING: {movie.vote_average}</small>\n        </p>\n        <p className=\"card--desc\">{movie.overview}</p>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function Loader() {\n  return (\n    <>\n      <p\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          width: \"100%\",\n          height: \"100%\",\n          marginTop: \"10%\",\n          color: \"white\",\n        }}\n      >\n        Getting your results..\n      </p>\n      <br></br>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          width: \"100%\",\n          height: \"100%\",\n          marginTop: \"10px\",\n          color: \"white\",\n        }}\n      >\n        <i className=\"fas fa-spinner fa-spin fa-5x\"></i>\n      </div>\n    </>\n  );\n}\n","import React, {useEffect, useState} from \"react\";\nimport \"./SearchMovie.css\";\nimport MovieCard from \"../MovieCard/MovieCard.js\";\nimport Loader from \"../Loader/Loader.js\";\n\nexport default function SearchMovie() {\n  const [query, setQuery] = useState(\"\");\n  const [movies, setMovies] = useState([]);\n  const [loading, setLodaing] = useState(false);\n  const [message, setMessage] = useState(\"Let's Go!\");\n  const [filter, setFilter] = useState('')\n  const [moviesForUI, setMoviesForUI] = useState([])\n  const [sort, setSort] = useState('ASC')\n\n  const sleep = (milliseconds) => {\n    return new Promise((resolve) => setTimeout(resolve, milliseconds));\n  };\n\n  useEffect(()=> {\n    if (filter) {\n      const filteredMovies = movies.filter(({title}) => title.toLowerCase().includes(filter.toLowerCase()))\n      return setMoviesForUI(filteredMovies) // We want to retain the original list in the event the filter is cleared\n    }\n  }, [filter, movies])\n\n\n  const toggleSort  = (direction) => {\n      const moviesToSort = moviesForUI.length > 0 ? moviesForUI : movies\n      let sortedMovies\n      if (direction === 'ASC') {\n        sortedMovies = moviesToSort.sort((a, b) => a.title.localeCompare(b.title))\n        return moviesForUI.length > 0 ? setMoviesForUI(sortedMovies) : setMovies(sortedMovies)\n      } else if (direction === 'DESC') {\n        sortedMovies = moviesToSort.reverse()\n        return moviesForUI.length > 0 ? setMoviesForUI(sortedMovies) : setMovies(sortedMovies)\n      }\n  }\n\n  const searchMovies = async (e, milliseconds = 1000) => {\n    e.preventDefault();\n    setLodaing(true);\n    await sleep(milliseconds);\n\n    const API_KEY = process.env.REACT_APP_API_KEY;\n    const url = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`;\n\n    try {\n      const res = await fetch(url);\n      const data = await res.json();\n      const sortedMovies = data.results.sort((a, b) => a.title.localeCompare(b.title)) // establish an alphabetical list for sorting\n      setMovies(sortedMovies);\n      setLodaing(false);\n      if (data.results.length === 0) {\n        setMessage(\"Oops! No Results Found\");\n      }\n      document.getElementById(\"form\").reset();\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return (\n    <>\n      <form className=\"form\" id=\"form\" onSubmit={searchMovies}>\n        <label htmlFor=\"query\" className=\"label\">\n          Movie Name\n        </label>\n        <input\n          type=\"text\"\n          className=\"input\"\n          name=\"query\"\n          placeholder=\"i.e Jurassic Park\"\n          onChange={(e) => setQuery(e.target.value)}\n        />\n        <button type=\"submit\" className=\"button\">\n          Search\n        </button>\n      </form>\n      <span className=\"filter-group\">\n        <span>\n          <label htmlFor=\"filter\" className=\"label\">\n            Filter list:\n          </label>\n          <input\n            type=\"text\"\n            className=\"input\"\n            name=\"filter\"\n            placeholder=\"Filter list\"\n            onChange={(e) => setFilter(e.target.value)}\n          />\n        </span>\n        <span className=\"sort-group\">\n          <span className=\"label\">Sort By: </span>\n          <span className={`label sort-button ${sort === 'ASC' ? \"highlight\":\"\"}`} onClick={()=> {\n            const direction = 'ASC'\n            setSort(direction)\n            toggleSort(direction)\n          }}>ASC</span>\n          <span className={`label sort-button ${sort === 'DESC' ? \"highlight\" : \"\"}`} onClick={()=> {\n            const direction = 'DESC'\n            setSort(direction)\n            toggleSort(direction)\n          }}>DESC</span>\n        </span>\n      </span>\n      {loading  && <Loader /> }\n      { movies.length > 0 && !filter ? (\n        <div className=\"card-list\">\n          {movies\n            .filter((movie) => movie.poster_path)\n            .map((movie) => (\n              <MovieCard movie={movie} key={movie.id} />\n            ))}\n        </div>\n      ) : moviesForUI.length > 0 && filter ? (\n        <div className=\"card-list\">\n          {moviesForUI\n            .filter((movie) => movie.poster_path)\n            .map((movie) => (\n              <MovieCard movie={movie} key={movie.id} />\n            ))}\n        </div>\n      ) : (\n        <h2\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            width: \"100%\",\n            height: \"100%\",\n            marginTop: \"10%\",\n            color: \"#fcefbf\",\n          }}\n        >\n          {message}\n        </h2>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport SearchMovie from \"./components/SearchMovie/SearchMovie\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">Search Movies!</h1>\n      <SearchMovie />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}